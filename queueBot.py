import telebot
from telebot import types

from Requests import ReqParser

with open('token.txt') as file:
    lines = [line.rstrip() for line in file]
    token = lines[0]

bot=telebot.TeleBot(token)

parser = ReqParser(bot)

@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def handle_text(message):
    parser.textHandler(message)

    if message.from_user.id in parser.setNameList:
        name = message.text
        bot.reply_to(message, "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        parser.setNameList.remove(message.from_user.id)
    if message.from_user.id in parser.joinCertainList:
        num = message.text
        bot.reply_to(message, "–¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –º–µ—Å—Ç–æ " + str(num))
        parser.joinCertainList.remove(message.from_user.id)
    if message.from_user.id in parser.subjectUserList:
        bot.send_message(message.chat.id, '–ü—Ä–µ–¥–º–µ—Ç ' + message.text + ' –¥–æ–±–∞–≤–ª–µ–Ω')
        parser.subjects.append(message.text)
        parser.subjectUserList.remove(message.from_user.id)

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="possibility")
    button2 = types.InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ã", callback_data="commands")
    markup.row(button1, button2)
    bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π.\n–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ "
                                     "–∫–æ–º–∞–Ω–¥–∞–º–∏, —á—Ç–æ –±—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é:", reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_message(message):
    parser.commandsList(message)

@bot.message_handler(commands=['create'])
def create_message(message):
    parser.createCommand(message)

@bot.message_handler(commands=['delete'])
def delete_message(message):
    parser.deleteCommand(message)

@bot.message_handler(commands=['member'])
def member_message(message):
    parser.memberCommand(message)

@bot.message_handler(commands=['show'])
def show_message(message):
    parser.showCommand(message)

@bot.message_handler(commands=['jointo'])
def jointo_message(message):
    parser.jointoCommand(message)

@bot.message_handler(commands=['join'])
def join_message(message):
    parser.joinCommand(message)

@bot.message_handler(commands=['subject'])
def subject_message(message):
    parser.subjectCommand(message)

@bot.message_handler(commands=['removesubject'])
def removesubject_message(message):
    parser.removesubjectCommand(message)

@bot.callback_query_handler(func = lambda callback: True)
def callback_message(callback):
    parser.callback(callback)

    if "createNum_" in callback.data:
        numStr = callback.data.strip("createNum_")
        numSubj = int(numStr)
        bot.send_message(callback.message.chat.id, "–°–æ–∑–¥–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å –ø–æ " + parser.subjList[numSubj])

    elif "deleteNum_" in callback.data:
        numStr = callback.data.strip("deleteNum_")
        numSubj = int(numStr)
        bot.send_message(callback.message.chat.id, "–£–¥–∞–ª–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å –ø–æ " + parser.subjList[numSubj])

    elif "showNum_" in callback.data:
        numStr = callback.data.strip("showNum_")
        numSubj = int(numStr)
        bot.send_message(callback.message.chat.id, "–û—á–µ—Ä–µ–¥—å –ø–æ " + parser.subjList[numSubj] + ":\n")

    elif "jointoNum_" in callback.data:
        numStr = callback.data.strip("jointoNum_")
        numSubj = int(numStr)
        bot.send_message(callback.message.chat.id, "–í—ã–±—Ä–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å –ø–æ " + parser.subjList[numSubj] + ":\n")
        callback.message.from_user = callback.from_user
        parser.joinCommand(callback.message)

    else:
        match callback.data:
            case "help_member":
                callback.message.from_user = callback.from_user
                parser.memberCommand(callback.message)
            case "help_show":
                parser.showCommand(callback.message)
            case "help_delete":
                parser.deleteCommand(callback.message)
            case "help_create":
                parser.createCommand(callback.message)
            case "help_join":
                parser.joinCommand(callback.message)
            case "help_jointo":
                parser.jointoCommand(callback.message)
            case "commands":
                parser.commandsList(callback.message)
            case "possibility":
                bot.send_message(callback.message.chat.id, "–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö "
                                                           "–æ—á–µ—Ä–µ–¥—è—Ö.ü§°\n –° –µ–≥–æ –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ "
                                                           "–¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –Ω–µ–µ, –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                                                           " –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—Ç–µ–ª "
                                                           "–ø–æ–π—Ç–∏ –Ω–∞ –¥–æ–ø—Å—É, –Ω–æ –∏ –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, –µ—Å–ª–∏, "
                                                           "–∫–æ–Ω–µ—á–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–≥–ª–∞—Å–µ–Ωüòà")
            case "member_cancel" | "show_cancel" | "create_cancel" | "delete_cancel"| "jointo_cancel":
                bot.delete_message(callback.message.chat.id, callback.message.id)
            case "member_add":
                if callback.from_user.id in parser.sendedMemberList:
                    bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π:")
                    parser.setNameList.append(callback.from_user.id)
                    parser.sendedMemberList.remove(callback.from_user.id)
            case "join_back":
                if callback.from_user.id in parser.joinList:
                    callback.message.from_user = callback.from_user
                    parser.joinList.remove(callback.from_user.id)
                    parser.jointoCommand(callback.message)
            case "join_first":
                if callback.from_user.id in parser.joinList:
                    num = 1
                    bot.send_message(callback.message.chat.id, "–¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ " + str(num) + " –º–µ—Å—Ç–æ")
                    parser.joinList.remove(callback.from_user.id)
            case "join_certain":
                if callback.from_user.id in parser.joinList:
                    bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏ –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏")
                    parser.joinCertainList.append(callback.from_user.id)
                    parser.joinList.remove(callback.from_user.id)
            case "join_last":
                if callback.from_user.id in parser.joinList:
                    num = 10
                    bot.send_message(callback.message.chat.id, "–¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ " + str(num) + " –º–µ—Å—Ç–æ")
                    parser.joinList.remove(callback.from_user.id)

            case _:
                return

bot.infinity_polling()