from typing import Dict, Callable, List
import os
import time

import telebot
from telebot import types
from dotenv import load_dotenv

from db import Database

from Requests.QueueEntity import QueueEntity
from Requests.QueueFun import QueueFun
from Requests.SubjectHandlers import SubjectHandlers
from Requests.UserHandlers import UserHandlers
from Requests.RuntimeInfoManager import RuntimeInfoManager

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))
botDB = Database()

runtimeInfoManager = RuntimeInfoManager()

subjectHandlers = SubjectHandlers(bot, botDB, runtimeInfoManager)
userHandlers = UserHandlers(bot, botDB, runtimeInfoManager)

qEntity = QueueEntity(bot, botDB)
qFun = QueueFun(bot, botDB)


def possibilityCommand(message: telebot.types.Message):
    bot.send_message(message.chat.id,
                     "–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö "
                     "–æ—á–µ—Ä–µ–¥—è—Ö.ü§°\n –° –µ–≥–æ –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∏ "
                     "–¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –Ω–µ–µ, –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                     " –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—Ç–µ–ª "
                     "–ø–æ–π—Ç–∏ –Ω–∞ –¥–æ–ø—Å—É, –Ω–æ –∏ –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, –µ—Å–ª–∏, "
                     "–∫–æ–Ω–µ—á–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–≥–ª–∞—Å–µ–Ωüòà"
                     )

def commandsList(message):
    markup = types.InlineKeyboardMarkup()
    bt1 = types.InlineKeyboardButton("/member", callback_data="help_member")
    bt2 = types.InlineKeyboardButton("/show", callback_data="help_show")
    bt3 = types.InlineKeyboardButton("/create", callback_data="help_create")
    bt4 = types.InlineKeyboardButton("/join", callback_data="help_join")
    bt5 = types.InlineKeyboardButton("/jointo", callback_data="help_jointo")
    bt6 = types.InlineKeyboardButton("/delete", callback_data="help_delete")
    markup.row(bt1, bt2)
    markup.row(bt3, bt4)
    markup.row(bt5, bt6)
    bot.send_message(message.chat.id,
                     "–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
                     "/member - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                     "/show - –≤—ã–≤–æ–¥ –æ—á–µ—Ä–¥–∏\n"
                     "/create - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏\n"
                     "/join - –∑–∞–ø–∏—Å—å –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å\n"
                     "/jointo - –∑–∞–ø–∏—Å—å –≤ –ª—é–±—É—é –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π\n"
                     "/delete - —É–¥–∞–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏",
                     reply_markup=markup)

def startCommand(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", callback_data="possibility")
    button2 = types.InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ã", callback_data="commands")
    markup.row(button1, button2)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π.\n–¢—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ "
                     "–∫–æ–º–∞–Ω–¥–∞–º–∏, —á—Ç–æ–±—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é:",
                     reply_markup=markup)

def deleteMessage(message: telebot.types.Message):
    bot.delete_message(message.chat.id, message.id)


commandHandlers: Dict[str, Callable[[telebot.types.Message], None]] = {
    '/start': startCommand,
    '/help': commandsList,
    '/create': qEntity.createCommand,
    '/delete': qEntity.deleteCommand,
    '/member': userHandlers.memberCommand,
    '/show': qEntity.showCommand,
    '/jointo': qFun.jointoCommand,
    '/join': qFun.joinCommand,
    '/subject': subjectHandlers.subjectCommand,
    '/removesubject': subjectHandlers.removesubjectCommand,
}

callbackHandlers: Dict[str, Callable[[telebot.types.CallbackQuery], None]] = {
    subjectHandlers.c_callbackPrefixRemovesubject: subjectHandlers.removesubjectCallback,
    'createNum_': qEntity.createCallback,
    'deleteNum_': qEntity.deleteCallback,
    'showNum_': qEntity.showCallback,
    'jointoNum_': qFun.jointoCallback,

    'help_member': lambda c: userHandlers.memberCommand(c.message),
    'help_show': lambda c: qEntity.showCommand(c.message),
    'help_delete': lambda c: qEntity.deleteCommand(c.message),
    'help_create': lambda c: qEntity.createCommand(c.message),
    'help_join': lambda c: qFun.joinCommand(c.message),
    'help_jointo': lambda c: qFun.jointoCommand(c.message),
    'commands': lambda c: commandsList(c.message),
    'possibility': lambda c: possibilityCommand(c.message),

    'member_cancel': lambda c: deleteMessage(c.message),
    'show_cancel': lambda c: deleteMessage(c.message),
    'create_cancel': lambda c: deleteMessage(c.message),
    'delete_cancel': lambda c: deleteMessage(c.message),
    'jointo_cancel': lambda c: deleteMessage(c.message),

    'member_add': userHandlers.memberAddCallback,
    'join_back': qFun.joinBackCallback,
    'join_first': qFun.joinFirstCallback,
    'join_certain': qFun.joinCertainCallback,
    'join_last': qFun.joinLastCallback,
}

textHandlers: List[Callable[[telebot.types.Message], None]] = {
    subjectHandlers.subjectTextHandler,
    userHandlers.setNameTextHandler,
    qFun.joinTextHandler,
}


@bot.message_handler(func=lambda message: message.text.startswith('/'))
def commandsHandler(message: telebot.types.Message):
    commandHandlers[message.text](message)

@bot.callback_query_handler(func = lambda callback: True)
def callback_message(callback: telebot.types.CallbackQuery):
    for key, handler in callbackHandlers.items():
        if callback.data.startswith(key):
            handler(callback)

@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def handle_text(message: telebot.types.Message):
    for textHandler in textHandlers:
        textHandler(message)


@bot.message_handler(content_types=['left_chat_member'])
def handle_left_chat_member(message):
    user_id = message.left_chat_member.id
    chat_id = message.chat.id
    bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")


bot.infinity_polling()
