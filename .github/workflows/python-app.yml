# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "cicd" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read



jobs:

#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#
#    - name: Set up Python 3.10
#      uses: actions/setup-python@v3
#      with:
#        python-version: "3.10"
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install flake8 pytest
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


  test-unit:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      host: ${{ secrets.HOST }}
      user: ${{ secrets.USER }}
      password: ${{ secrets.PASSWORD }}
      db_name: ${{ secrets.DB_NAME }}
      port: ${{ secrets.PORT }}
      PGPASSWORD: postgres

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set up PostgreSQL DB
      run: |
        psql -U postgres -h localhost -p ${{ job.services.postgres.ports['5432'] }} -c 'CREATE DATABASE queue_db
                                                                                            WITH
                                                                                            OWNER = postgres
                                                                                            ENCODING = 'UTF8'
                                                                                            TABLESPACE = pg_default
                                                                                            CONNECTION LIMIT = -1
                                                                                            IS_TEMPLATE = False;'
        psql -U postgres -h localhost -p ${{ job.services.postgres.ports['5432'] }} -d queue_db -a -f Src/DbUtils/create_db_structure.sql

    - name: Run Unit tests
      run: |
        pytest -m unit


  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      host: ${{ secrets.HOST }}
      user: ${{ secrets.USER }}
      password: ${{ secrets.PASSWORD }}
      db_name: ${{ secrets.DB_NAME }}
      port: ${{ secrets.PORT }}
      PGPASSWORD: postgres

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set up PostgreSQL DB
      run: |
        psql -U postgres -h localhost -p ${{ job.services.postgres.ports['5432'] }} -c 'CREATE DATABASE queue_db
                                                                                            WITH
                                                                                            OWNER = postgres
                                                                                            ENCODING = 'UTF8'
                                                                                            TABLESPACE = pg_default
                                                                                            CONNECTION LIMIT = -1
                                                                                            IS_TEMPLATE = False;'
        psql -U postgres -h localhost -p ${{ job.services.postgres.ports['5432'] }} -d queue_db -a -f Src/DbUtils/create_db_structure.sql

    - name: Run Integration tests
      run: |
        pytest -m integration


  test-system:
    runs-on: ubuntu-latest
    needs: test-integration

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      TOKEN: ${{ secrets.TOKEN }}
      chat_id: ${{ secrets.CHAT_ID }}
      host: ${{ secrets.HOST }}
      user: ${{ secrets.USER }}
      password: ${{ secrets.PASSWORD }}
      db_name: ${{ secrets.DB_NAME }}
      port: ${{ secrets.PORT }}
      bot_id: ${{ secrets.BOT_ID }}
      PGPASSWORD: postgres
      api_id: ${{ secrets.API_ID }}
      api_hash: ${{ secrets.API_HASH }}
      session_string: ${{ secrets.API_SESSION }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set up PostgreSQL DB
      run: |
        psql -U postgres -h localhost -p ${{ job.services.postgres.ports['5432'] }} -c 'CREATE DATABASE queue_db
                                                                                            WITH
                                                                                            OWNER = postgres
                                                                                            ENCODING = 'UTF8'
                                                                                            TABLESPACE = pg_default
                                                                                            CONNECTION LIMIT = -1
                                                                                            IS_TEMPLATE = False;'
        psql -U postgres -h localhost -p ${{ job.services.postgres.ports['5432'] }} -d queue_db -a -f Src/DbUtils/create_db_structure.sql

    - name: Run tg-bot
      run: |
        python Src/queueBot.py &

    - name: Run System tests
      run: |
        pytest -m system

    - name: Stop tg-bot
      run: |
        pkill -f queueBot.py


  build-image:
    runs-on: ubuntu-latest
    needs: test-system

    env:
      REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      REMOTE_USER: ${{ secrets.REMOTE_USER }}
      REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
      TOKEN: ${{ secrets.TOKEN }}
      DB_USER: ${{ secrets.user }}
      DB_PASSWORD: ${{ secrets.password }}
      DB_NAME: ${{ secrets.db_name }}
      DB_PORT: ${{ secrets.port }}
      chat_id: ${{ secrets.CHAT_ID }}
      bot_id: ${{ secrets.BOT_ID }}

    steps:
    - name: Install Docker Compose
      run: |
        curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Build Docker image
      run: |
        docker-compose -f docker-compose.yml build


  deploy-prod:
    runs-on: ubuntu-latest
    needs: test-system

    env:
      REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      REMOTE_USER: ${{ secrets.REMOTE_USER }}
      REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
      TOKEN: ${{ secrets.TOKEN }}
      DB_USER: ${{ secrets.user }}
      DB_PASSWORD: ${{ secrets.password }}
      DB_NAME: ${{ secrets.db_name }}
      DB_PORT: ${{ secrets.port }}
      chat_id: ${{ secrets.CHAT_ID }}
      bot_id: ${{ secrets.BOT_ID }}

    steps:
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Build Docker image
        run: |
          docker-compose -f docker-compose.yml build

      - name: Set up SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

      - name: Save and transfer Docker image to remote server
        if: success()
        run: |
          docker save bot | ssh $REMOTE_USER@$REMOTE_HOST "docker load"

      - name: Deploy container on remote server
        if: success()
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST "cd queue-bot/ && docker compose up -d"